name: "Deploy Apache Airflow DAGs to Astro"
description: "Test your DAGs and deploy your Astro project to a Deployment on Astro, Astronomer's managed Airflow service."
author: "Astronomer"
branding:
  icon: "upload-cloud"
  color: "purple"
inputs:
  root-folder:
    required: false
    default: ./
    description: "Path to the Astro project folder that contains the 'dags' or 'dbt' folder."
  parse:
    required: false
    default: false
    description: "If true DAGs will be parsed before deploying to Astro."
  pytest:
    required: false
    default: false
    description: "if true custom pytests will be ran before deploying to Astro."
  pytest-file:
    required: false
    default: tests/
    description: "Specify custom pytest files to run with the pytest command."
  force:
    required: false
    default: false
    description: "If true your code will be force deployed to Astronomer. Mostly used to skip parse test on image deploys."
  image-name:
    required: false
    default: no-custom-image
    description: "Specify a custom built image to deploy to an Asto Deployment."
  action:
    required: false
    default: deploy
    description: "Specify what action you would like to take. Use this option to create or delete deployment previews. Specify either 'dbt-deploy', 'create-deployment-preview', 'delete-deployment-preview', 'deploy-deployment-preview', or 'dbt-deploy-deployment-preview'."
  deployment-name:
    required: false
    description: "The name of the Deployment you want to make preview from or are deploying to."
  deployment-id:
    required: false
    description: "The id of the Deployment you to make a preview from or are deploying to."
  workspace:
    required: false
    description: "Workspace id to select. Only required when `ASTRO_API_TOKEN` is given an organization token."
  preview-name:
    required: false
    description: "Custom preview name. By default this is <branch-name>_<deployment-name>."
  copy-connections:
    required: false
    default: true
    description: "Copy connections from the original Deployment to the new deployment preview."
  copy-airflow-variables:
    required: false
    default: true
    description: "Copy Airflow variables from the original Deployment to the new deployment preview."
  copy-pools:
    required: false
    default: true
    description: "Copy pools from the original Deployment to the new deployment preview."
  cli-version:
    required: false
    default: ""
    description: "The desired Astro CLI version to use"
  checkout:
    required: false
    default: true
    description: "Whether to checkout the repo as the first step. Set this to false if you want to modify repo contents before invoking the action"
  description:
    required: false
    description: >
      A description to set for deploying to Astro. This is equivalent to running `astro deploy --description "..."` with the Astro CLI.
      The description is visible in the Deploy History tab in your Astro Deployment, and can be helpful to explain what triggered a deploy.

      For example, to display the most recent commit that resulted in an Astro deploy, you could configure
      `description: "Deployed from commit ..."` with the value of `github.event.after`.
      This would display e.g. "Deployed from commit da39a3ee5e6b4b0d3255bfef95601890afd80709".
      Reference: https://docs.github.com/en/webhooks/webhook-events-and-payloads#push.
  deploy-image:
    required: false
    default: false
    description: "If true image and DAGs will deploy"
  build-secrets:
    required: false
    description: "Mimics docker build --secret flag. See https://docs.docker.com/build/building/secrets/ for more information. Example input 'id=mysecret,src=secrets.txt'"
  mount-path:
    required: false
    default: ""
    description: "Path to mount the dbt project folder in Airflow."
outputs:
  preview-id:
    description: "The ID of the created deployment preview. Only works when action=create-deployment-preview"
    value: ${{ steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID }}

runs:
  using: "composite"
  steps:
    - name: checkout repo
      uses: actions/checkout@v4
      if: inputs.checkout == 'true'
      with:
        fetch-depth: 0 # Fetch all history
        ref: ${{ github.event.after }}
        clean: false
    - name: Install Astro CLI
      run: |

        echo ::group::Install Astro CLI
        CLI_VERSION=${{ inputs.cli-version }}
        # check if CLI_VERSION does not starts with "v", then add "v" to it
        if [[ $CLI_VERSION != "" && $CLI_VERSION != v* ]]; then
          CLI_VERSION=v$CLI_VERSION
        fi

        # Check if the Astro CLI version is less than 1.28.1 for dbt-deploy
        if [[ "${{ inputs.action }}" == "dbt-deploy" && $CLI_VERSION != "" && $CLI_VERSION < "v1.28.1"  ]]; then
          echo "DBT Deploy requires Astro CLI version 1.28.1 or higher"
          exit 1
        fi

        if [[ $CLI_VERSION == "" ]]; then
          curl -sSL https://install.astronomer.io | sudo bash -s
        else
          curl -sSL https://install.astronomer.io | sudo bash -s -- $CLI_VERSION
        fi
        echo ::endgroup::
      shell: bash
    - name: Deployment Preview action
      run: |

        echo ::group::Deployment Preview action
        # set action
        ACTION=nothing

        # Select workspace if specified
        if [[ "${{ inputs.workspace }}" != "" ]]; then
          astro workspace switch ${{ inputs.workspace }}
        fi
        # error if both deployment name and id are used
        if [[ "${{ inputs.deployment-name }}" != "" && "${{ inputs.deployment-id }}" != "" ]]; then
          echo ERROR: cannot specify both a Deployment ID and Name
          exit 1 # terminate and indicate error
        fi
        # figure out deployment id
        if [[ "${{ inputs.deployment-name }}" != "" ]]; then
          # get deployment-id
          DEPLOYMENT_ID="$(astro deployment inspect --clean-output -n "${{ inputs.deployment-name }}" --key metadata.deployment_id)"
        fi

        if [[ "${{ inputs.deployment-id }}" != "" ]]; then
          DEPLOYMENT_ID="${{ inputs.deployment-id }}"
        fi
        # create deployment preview if action is create-deployment-preview
        if [[ ${{ inputs.action }} == create-deployment-preview ]]; then

          if [[ "${{ inputs.deployment-name }}" == "" && "${{ inputs.deployment-id }}" == "" ]]; then
            echo ERROR: cannot create a deployment preview without specifying a deployment name or id
            exit 1 # terminate and indicate error
          fi

          if [[ "${{ inputs.preview-name }}" != "" ]]; then
            BRANCH_DEPLOYMENT_NAME="${{ inputs.preview-name }}"
          else
            # get branch name
            DEPLOYMENT_NAME="$(astro deployment inspect $DEPLOYMENT_ID --clean-output --key configuration.name)"
            if [[ ${GITHUB_HEAD_REF##*/} != "" ]]; then
              BRANCH_DEPLOYMENT_NAME=${GITHUB_HEAD_REF##*/}_$DEPLOYMENT_NAME
            else
              branch_ref="${{ github.ref }}"
              branch_name="${branch_ref##*/}"
              BRANCH_DEPLOYMENT_NAME=${branch_name}_$DEPLOYMENT_NAME
            fi
            BRANCH_DEPLOYMENT_NAME="${BRANCH_DEPLOYMENT_NAME// /_}"
            echo $BRANCH_DEPLOYMENT_NAME
          fi

          # Create template of deployment to be copied with
          astro deployment inspect $DEPLOYMENT_ID --clean-output --template > deployment-preview-template.yaml # automatically creates deployment-preview-template.yaml file

          # Add name to deployment template file
          sed -i "s|  name:.*|  name: ${BRANCH_DEPLOYMENT_NAME}|g"  deployment-preview-template.yaml

          # Create new deployment preview based on the deployment template file
          astro deployment create --deployment-file deployment-preview-template.yaml

          # Get final Deployment ID
          echo "FINAL_DEPLOYMENT_ID=$(astro deployment inspect --clean-output -n $BRANCH_DEPLOYMENT_NAME --key metadata.deployment_id)" >> $GITHUB_OUTPUT

          # Get original Deployment ID
          echo "ORIGINAL_DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

          # don't skip deploy
          echo "SKIP_DEPLOY=false" >> $GITHUB_OUTPUT

          # image deploy only
          echo "IMAGE_DEPLOY_ONLY=true" >> $GITHUB_OUTPUT

          # set action
          ACTION=create
        fi

        # delete deployment preview and skip deploy if action is delete-deployment-preview
        if [[ ${{ inputs.action }} == delete-deployment-preview ]]; then

          if [[ "${{ inputs.deployment-name }}" == "" && "${{ inputs.deployment-id }}" == "" ]]; then
            echo ERROR: cannot delete a deployment preview without specifying a deployment name or id
            exit 1 # terminate and indicate error
          fi

          if [[ "${{ inputs.preview-name }}" != "" ]]; then
            BRANCH_DEPLOYMENT_NAME="${{ inputs.preview-name }}"

          else
            DEPLOYMENT_NAME="$(astro deployment inspect $DEPLOYMENT_ID --clean-output --key configuration.name)"
            BRANCH_DEPLOYMENT_NAME=${{ github.event.ref }}_$DEPLOYMENT_NAME
            BRANCH_DEPLOYMENT_NAME="${BRANCH_DEPLOYMENT_NAME// /_}"
          fi
          # delete branch deployment
          astro deployment delete -n $BRANCH_DEPLOYMENT_NAME -f

          # skip deploy
          echo "SKIP_DEPLOY=true" >> $GITHUB_OUTPUT

          # not image deploy only
          echo "IMAGE_DEPLOY_ONLY=false" >> $GITHUB_OUTPUT

          # set action
          ACTION=delete
        fi

        # # deploy to deployment preview if action is deploy-deployment-preview
        if [[ ${{ inputs.action }} == deploy-deployment-preview || ${{ inputs.action }} == dbt-deploy-deployment-preview ]]; then

          if [[ "${{ inputs.deployment-name }}" == "" && "${{ inputs.deployment-id }}" == "" ]]; then
            echo ERROR: cannot deploy to a deployment preview without specifying a deployment name or id
            exit 1 # terminate and indicate error
          fi

          if [[ "${{ inputs.preview-name }}" != "" ]]; then
            BRANCH_DEPLOYMENT_NAME="${{ inputs.preview-name }}"
          else
            DEPLOYMENT_NAME="$(astro deployment inspect $DEPLOYMENT_ID --clean-output --key configuration.name)"
            if [[ ${GITHUB_HEAD_REF##*/} != "" ]]; then
              BRANCH_DEPLOYMENT_NAME=${GITHUB_HEAD_REF##*/}_$DEPLOYMENT_NAME
            else
              # BRANCH_DEPLOYMENT_NAME=${{ github.event.ref }}_$DEPLOYMENT_NAME
              branch_ref="${{ github.ref }}"
              branch_name="${branch_ref##*/}"
              BRANCH_DEPLOYMENT_NAME=${branch_name}_$DEPLOYMENT_NAME
            fi
            BRANCH_DEPLOYMENT_NAME="${BRANCH_DEPLOYMENT_NAME// /_}"
          fi

          # Get Deployment ID
          echo "FINAL_DEPLOYMENT_ID=$(astro deployment inspect --clean-output -n $BRANCH_DEPLOYMENT_NAME --key metadata.deployment_id)" >> $GITHUB_OUTPUT

          # don't skip deploy
          echo "SKIP_DEPLOY=false" >> $GITHUB_OUTPUT

          # not image deploy only
          echo "IMAGE_DEPLOY_ONLY=false" >> $GITHUB_OUTPUT

          # set action
          ACTION=deploy-preview
        fi

        # if action is deploy or dbt deploy simply set final Deployment id to Deployment id to streamline the deployment id reference in rest of the workflow
        if [[ ${{ inputs.action }} == deploy || ${{ inputs.action }} == dbt-deploy ]]; then
          echo "FINAL_DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

          # don't skip deploy
          echo "SKIP_DEPLOY=false" >> $GITHUB_OUTPUT

          # not image deploy only
          echo "IMAGE_DEPLOY_ONLY=false" >> $GITHUB_OUTPUT

          # set action
          ACTION=${{ inputs.action }}
        fi

        if [[ $ACTION == nothing ]]; then
          echo ERROR: you specified an improper action input. Action must be deploy, deploy-deployment-preview, create-deployment-preview, or delete-deployment-preview.
          exit 1 # terminate and indicate error
        fi
        echo ::endgroup::
      shell: bash
      id: deployment-preview
    - name: Determine if DAG Deploy is enabled
      run: |

        echo ::group::Determine if DAG Deploy is enabled
        if [[ ${{steps.deployment-preview.outputs.SKIP_DEPLOY}} == false && ${{steps.deployment-preview.outputs.IMAGE_DEPLOY_ONLY}} == false ]]; then
          echo "DAG_DEPLOY_ENABLED=$(astro deployment inspect ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}} --clean-output --key configuration.dag_deploy_enabled)" >> $GITHUB_OUTPUT
        else
          echo "DAG_DEPLOY_ENABLED=false" >> $GITHUB_OUTPUT
        fi
        echo ::endgroup::
      shell: bash
      id: dag-deploy-enabled
    - name: Get DBT Deploy Options
      run: |

        echo ::group::Get DBT Deploy Options
        if [[ "${{ inputs.action }}" != "dbt-deploy" && "${{ inputs.action }}" != "dbt-deploy-deployment-preview" ]]; then
          echo "skipping the steps since the action is not dbt-deploy or dbt-deploy-deployment-preview"
          echo "DBT_DEPLOY=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        cd ${{ inputs.root-folder }}
        branch=$(echo "${GITHUB_REF#refs/heads/}")
        echo "Branch pushed to: $branch"
        git fetch origin $branch
        files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
        echo "Files changed: $files"
        dbt_deploy=0

        for file in $files; do
          if [[ $file == *"${{ inputs.root-folder }}"* ]]; then
            echo $file is part of dbt folder, so would be triggering a dbt deploy also
            dbt_deploy=1
          fi
        done

        # validate that the DAG Deploy is enabled for the Deployment
        if [[ ${{steps.dag-deploy-enabled.outputs.DAG_DEPLOY_ENABLED}} == false && dbt_deploy == 1 ]]; then
          echo ERROR: "Enable DAG Deploy for the Deployment in order to do a DBT Deploy"
          exit 1
        fi

        # validate that mount path is provided
        if [[ "${{ inputs.mount-path }}" == "" && dbt_deploy == 1 ]]; then
          echo ERROR: "Mount path is required for DBT Deploy, pass 'mount-path' input correctly"
          exit 1
        fi

        options=""
        if [[ $dbt_deploy == 1 ]]; then
          options="$options --mount-path=${{ inputs.mount-path }}"

          # Add description option
          if [[ "${{ inputs.description }}" != "" ]]; then
            options="$options --description '${{ inputs.description }}'"
          fi
        fi

        echo "DBT_DEPLOY=$dbt_deploy" >> $GITHUB_OUTPUT
        echo "DBT_OPTIONS=$options" >> $GITHUB_OUTPUT
        echo ::endgroup::
      shell: bash
      id: dbt-deploy-options
    - name: Get Deployment Type
      run: |

        echo ::group::Get Deployment Type
        # skip if the action is DBT Deploy
        if [[ "${{ inputs.action }}" == "dbt-deploy" || "${{ inputs.action }}" == "dbt-deploy-deployment-preview" ]]; then
          echo "skipping the steps since the action is one of dbt-deploy or dbt-deploy-deployment-preview"
          exit 0
        fi

        cd ${{ inputs.root-folder }}
        branch=$(echo "${GITHUB_REF#refs/heads/}")
        echo "Branch pushed to: $branch"
        git fetch origin $branch
        files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
        echo "files changed: $files"
        dags_only=1

        skip_deploy=1

        # This for loop checks for following cases:
        # 1. If no file is part of the input root folder, then it skips deploy
        # 2. If any file is not part of the dags folder, then it triggers a full image build
        # 3. If all files are part of the dags folder and input root folder, then it triggers a DAG-only deploy
        for file in $files; do
          if [[ $file == *"${{ inputs.root-folder }}"* ]]; then
            echo $file is part of the input root folder
            skip_deploy=0
            if [[ $file != *"dags/"* ]]; then
              echo $file is not a DAG, triggering a full image build
              dags_only=0
              break
            fi
          fi
        done

        # check if user has passed a custom image or deploy-image is true, then we would need to deploy the image
        if [[ ${{ inputs.image-name }} != "no-custom-image" || ${{ inputs.deploy-image }} == true ]]; then
          skip_deploy=0
          dags_only=0
        fi

        if [[ ${{steps.dag-deploy-enabled.outputs.DAG_DEPLOY_ENABLED}} == false ]]; then
          dags_only=0
        fi

        if [[ ${{steps.deployment-preview.outputs.SKIP_DEPLOY}} == true || $skip_deploy == 1 ]]; then
          # skip all deploy steps
          dags_only=2
        fi

        echo "DAGS_ONLY=$dags_only" >> $GITHUB_OUTPUT
        echo ::endgroup::
      shell: bash
      id: deployment-type
    # If only DAGs changed and dag deploys is enabled, do a DAG-only deploy
    - name: setup deploy options
      run: |

        echo ::group::Setup Deploy Options
        # skip if the action is DBT Deploy
        if [[ "${{ inputs.action }}" == "dbt-deploy" || "${{ inputs.action }}" == "dbt-deploy-deployment-preview" ]]; then
          echo "skipping the steps since the action is one of dbt-deploy or dbt-deploy-deployment-preview"
          exit 0
        fi

        options=""

        # add parse option
        if [[ ${{ inputs.parse }} == true ]]; then
          options="--parse"
        fi

        # add pytest option
        if [[ ${{ inputs.pytest }} == true ]]; then
          options="$options --pytest --test ${{ inputs.pytest-file }}"
        fi

        # add custom image option
        if [[ ${{ inputs.image-name }} != no-custom-image ]]; then
          options="$options --image-name ${{ inputs.image-name }}"
        fi

        # add force option
        if [[ ${{ inputs.force }} == true ]]; then
          options="$options --force"
        fi

        # Add description option
        if [[ "${{ inputs.description }}" != '' ]]; then
          options="$options --description '${{ inputs.description }}'"
        fi

        # Add build-secrets option
        if [[ "${{ inputs.build-secrets }}" != '' ]]; then
          options="$options --build-secrets '${{ inputs.build-secrets }}'"
        fi

        echo "OPTIONS=$options" >> $GITHUB_OUTPUT
        echo ::endgroup::
      shell: bash
      id: deploy-options
    - name: Determine if Development Mode is enabled
      run: |

        echo ::group::Determine if Development Mode is enabled
        if [[ ${{steps.deployment-preview.outputs.SKIP_DEPLOY}} == false ]]; then
          echo "DEVELOPMENT_MODE=$(astro deployment inspect ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}} --clean-output --key configuration.is_development_mode)" >> $GITHUB_OUTPUT
        fi
        echo ::endgroup::
      shell: bash
      id: development-mode
    - name: Override to wake up the Deployment
      run: |

        echo ::group::Override to wake up the Deployment
        if [[ ${{steps.deployment-preview.outputs.SKIP_DEPLOY}} == false && ${{steps.development-mode.outputs.DEVELOPMENT_MODE}} == true ]]; then
          astro deployment wake-up ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}} --force
          # Give it some time to wake up
          sleep 60
        fi
        echo ::endgroup::
      shell: bash
    - name: DAG Deploy to Astro
      if: ${{ steps.deployment-type.outputs.DAGS_ONLY == 1 && inputs.action != 'dbt-deploy' && inputs.action != 'dbt-deploy-deployment-preview' }}
      run: |

        echo ::group::DAG Deploy to Astro
        # Deploy only dags
        cd ${{ inputs.root-folder }}
        astro deploy ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}} --dags ${{steps.deploy-options.outputs.OPTIONS}}
        echo ::endgroup::
      shell: bash
    # If any other files changed or dag deploys is disabled, deploy the entire Astro project
    - name: Image and DAG Deploy to Astro
      if: ${{ steps.deployment-type.outputs.DAGS_ONLY == 0 && inputs.action != 'dbt-deploy' && inputs.action != 'dbt-deploy-deployment-preview' }}
      run: |

        echo ::group::Image and DAG Deploy to Astro
        # Deploy image and DAGs
        cd ${{ inputs.root-folder }}
        astro deploy ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}} ${{steps.deploy-options.outputs.OPTIONS}}
        echo ::endgroup::
      shell: bash
    - name: DBT Deploy to Astro
      if: ${{ steps.dbt-deploy-options.outputs.DBT_DEPLOY == 1 && (inputs.action == 'dbt-deploy' || inputs.action == 'dbt-deploy-deployment-preview') }}
      run: |

        echo ::group::DBT Deploy to Astro
        cd ${{ inputs.root-folder }}
        astro dbt deploy ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}} ${{steps.dbt-deploy-options.outputs.DBT_OPTIONS}}
        echo ::endgroup::
      shell: bash
    - name: Copy Airflow Connections, Variables, and Pools
      run: |

        echo ::group::Copy Airflow Connections, Variables, and Pools
        if [[ ${{ inputs.action }} == create-deployment-preview ]]; then
          if [[ ${{ inputs.copy-connections }} == true ]]; then
            astro deployment connection copy --source-id ${{steps.deployment-preview.outputs.ORIGINAL_DEPLOYMENT_ID}}  --target-id ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}}
          fi
          if [[ ${{ inputs.copy-airflow-variables }} == true ]]; then
            astro deployment airflow-variable copy --source-id ${{steps.deployment-preview.outputs.ORIGINAL_DEPLOYMENT_ID}} --target-id ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}}
          fi
          if [[ ${{ inputs.copy-pools }} == true ]]; then
            astro deployment pool copy --source-id ${{steps.deployment-preview.outputs.ORIGINAL_DEPLOYMENT_ID}} --target-id ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}}
          fi
        fi
        echo ::endgroup::
      shell: bash
    - name: Remove override on Deployment to resume schedule
      run: |

        echo ::group::Remove override on Deployment to resume schedule
        if [[ ${{steps.deployment-preview.outputs.SKIP_DEPLOY}} == false && ${{steps.development-mode.outputs.DEVELOPMENT_MODE}} == true ]]; then
          astro deployment wake-up ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}} --remove-override --force
        fi
        echo ::endgroup::
      shell: bash
